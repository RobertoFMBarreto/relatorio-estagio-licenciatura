@book{api_design,
  author    = {Brenda Jin and Saurabh Sahni and Amir Shevat},
  isbn      = {9781492026877},
  month     = {8},
  pages     = {1-232},
  publisher = {O'Reilly Media, Inc.},
  title     = {Designing Web APIs},
  year      = {2018}
}



@misc{axios,
  author       = {Axios},
  title        = {Getting Started | Axios Docs},
  howpublished = {\url{https://axios-http.com/docs/intro}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@misc{bcrypt,
  author       = {Coda Hale},
  title        = {How To Safely Store A Password},
  howpublished = {\url{https://codahale.com/how-to-safely-store-a-password/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@misc{chai,
  author       = {Chai Assertion Library},
  title        = {Chai},
  howpublished = {\url{https://www.chaijs.com/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@misc{crontab,
  author       = {Linux},
  title        = {crontab(5) - Linux manual page},
  howpublished = {\url{https://man7.org/linux/man-pages/man5/crontab.5.html}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@book{dart,
  abstract  = {Factory (87) Provide an interface for creating families of related or dependent objects without specifying their concrete classes. Builder (97) Separate the construction of a complex object from its representation so that the same construction process can create different representations. Factory Method (107) Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses. Prototype (117) Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype. Singleton (127) Ensure a class only has one instance, and provide a global point of access to it. Structural Patterns Adapter (139) Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces. Bridge (151) Decouple an abstraction from its implementation so that the two can vary independently. Composite (163) Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Decorator (175) Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. Facade (185) Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Flyweight (195) Use sharing to support large numbers of fine-grained objects efficiently. Proxy (207) Provide a surrogate or placeholder for another object to control access to it.},
  author    = {Erich Gamma and Richard Helm and Ralph Johnson and John Vlissides},
  isbn      = {0201633612},
  month     = {3},
  pages     = {1-417},
  publisher = {Addison-Wesley},
  title     = {Design Patterns: Elements of Reusable Object-Oriented Software},
  year      = {2009}
}

@report{dart_pg_lang,
  author    = {Gilad Bracha},
  title     = {The Dart Programming Language},
  isbn      = {9780321927705},
  pages     = {224},
  publisher = {Addison-Wesley Professional},
  year      = {2015}
}

@book{design_node,
  abstract  = {Table of Contents Getting Set Up Node Fundamentals -- Part 1 Node Fundamentals -- Part 2 Node Fundamentals -- Part 3 Basics of Asynchronous Programming in Node.js Callbacks in Asynchronous Programming Promises in asynchronous programming Web Servers in Node Deploying Applications to Web Testing the Node Application part 1 Testing the Node Application part 2.},
  author    = {Andrew Mead},
  isbn      = {9781788395540},
  month     = {1},
  pages     = {1-649},
  publisher = {Packt Publishing Ltd.},
  title     = {Learning Node.js development : learn the fundamentals of Node.js, and deploy and test Node.js applications on the web},
  year      = {2018}
}

@misc{dynamic_linking,
  author       = {Firebase},
  title        = {Firebase Dynamic Links | Firebase Documentation},
  howpublished = {\url{https://firebase.google.com/docs/dynamic-links}},
  year         = {2023},
  note         = {[Abril-2023]}
}


@book{flutter,
  abstract  = {Generating an application record on App Store connect Flutter is a cross-platform mobile application development framework .It uses the Dart programming language that was created by Google and aims to make development easier, faster and efficient. This book is going to be your guide from introducing Flutter to successfully developing a cross-platform application. Cover; Title Page; Copyright and Credits; Dedication; About Packt; Contributors; Table of Contents; Preface; Chapter 1: Introducing Flutter; The origin of Flutter; What is a widget?; Comparing Flutter to existing frameworks; Native platforms; WebView systems; Other cross-platform approaches; Flutter's approach; Why use Flutter?; Summary; Chapter 2: Getting Started with Flutter; Installing Flutter; Installing Flutter on Windows; Installing Flutter on Mac; Installing Flutter on Linux; Getting familiar with IDEs; Some quick tips for using your desired IDE; Exploring a sample app; Hot Reload Debugging an applicationDart analyzer; Dart observatory; Visual debugging; Material grid variable; The showPerformanceOverlay variable; Flutter widget inspector; Testing a Flutter application; Unit testing; Widget testing; Integration testing; Summary; Chapter 3: Widgets, Widgets Everywhere; Widgets Catalog; Container; Image; Text; Icon; RaisedButton; Scaffold; AppBar; PlaceHolder; Column; Row; ListView; A note about Row, Column, and ListView; Creating widgets; Stateless widgets; Stateful widgets; Routing and navigation; Returning a value when navigating; Summary Chapter 4: Exploiting the Widgets VarietyConstraints in Flutter; Introducing animations in Flutter; Animation categories; Common patterns; Using ListView and scrolling widgets; ListView ; Using List ; Using ListView. Builder; ListView separated by calling ListView.separated; Using ListView.custom constructor; Horizontal lists; Grid lists ; Introducing silvers ; Summary; Chapter 5: Widening our Flutter Horizons; Networking in Flutter; Using packages; Adding existing package dependency to an app; Upgrading existing package; Building a REST service; Setting up JSON Server Building a resource fileRun the json-server; Fetching data from the server; Accessibility in Flutter ; Large font; Screen readers ; Screen contrast; Internation∆Øalizing Flutter apps; Summary; Chapter 6: Using a Platform to Power Flutter Apps; Using Flutter packages; Searching for the package; Adding a package dependency to an app; Ways to specify package dependencies; Adding the code to the file ; Using platform channels; Creating a new Flutter project; Creating a Flutter platform client ; Making changes to MainActivity. Java ; Building and publishing your own plugin ; Summary Chapter 7: Firebase -- Flutter's Best FriendConnecting with Firebase; Creating a Firebase project; Registering an app using a package name; Downloading and setting up the config file ; Adding Firebase SDK; Verifying the configuration; Creating a Cloud Firestore Database; Firebase Cloud Messaging; Firebase Remote Config; Summary; Chapter 8: Deploying Flutter Apps; Deploying on Android; Reviewing the AndroidManifest.xml file; The build.gradle configurations; Icons within apps; Signing the app; Using ProGuard; Building a release APK; Deploying on iOS; Registering Bundle ID},
  author    = {Prajyot Mainkar and Salvatore Giordano},
  isbn      = {9781789344967},
  pages     = {146},
  publisher = {Packt Publishing Ltd},
  title     = {Google Flutter Mobile Development Quick Start Guide : Get up and Running with IOS and Android Mobile App Development.},
  year      = {2019}
}
@article{Halili2018,
  author  = {Festim Halili and Erenis Ramadani},
  doi     = {10.5539/mas.v12n3p175},
  journal = {Modern Applied Science},
  month   = {2},
  pages   = {175},
  title   = {Web Services: A Comparison of Soap and Rest Services},
  volume  = {12},
  year    = {2018}
}

@misc{linking,
  author       = {Android Developers},
  title        = {Handling Android App Links},
  howpublished = {\url{https://developer.android.com/training/app-links#android-app-links}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@report{Logging,
  author    = {Dr. Anton A. Chuvakin and Kevin J. Schmidt and Christopher Philips},
  isbn      = {9781597496353},
  title     = {Logging and Log Management},
  pages     = {1-463},
  year      = {2012},
  publisher = {Syngress media,u.s.}
}

@misc{mocha,
  author       = {OpenJS Foundation},
  title        = {Mocha - the fun, simple, flexible JavaScript test framework},
  howpublished = {\url{https://mochajs.org/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@book{Moroney2017,
  abstract  = {Developing a new web application should not mean reinventing the wheel. Thats why a framework is an essential item in your development toolbox. It helps you respect coding standards; write bulletproof, maintainable code; and focus on business rules rather than waste time on repetitive tasks. This book introduces you to symfony, the leading framework for PHP developers, showing you how to wield its many features to develop web applications faster and more efficiently, efile:///E:/MAESTRIA/Documentos/Tesis Wilson.pdfven if you only know a bit of PHP. In The Definitive Guide to symfony, you will learn about the Model-View-Controller architecture and the crucial role it plays in making frameworks like symfony possible. The book also covers framework installation and configuration, and shows you how to build pages, deal with templates, manage requests and sessions, and communicate with databases and servers. You will see how symfony can make your life easier by effectively managing form data, enhancing the user experience with Ajax, internationalizing applications for a global audience, and using smart URLs. Authors Fran√ßois Zaninotto and Fabien Potencier put a strong emphasis on the tools that symfony provides for professional environments, showing you how to take advantage of unit tests, scaffolding, plug-ins, the command line, and extensible configuration. And since frameworks often raise performance-related debate, this book will give you many tips and techniques for monitoring and improving your applications performance, from caching to expert configuration tweaks. Always keen to offer practical instruction, the authors include lots of code examples, expert tips, best practices, and illustrations throughout this book, with the goal of providing a resource that satisfies the educational needs of symfony's rapidly growing user community.},
  author    = {Laurence Moroney},
  doi       = {10.1007/978-1-4842-2943-9},
  journal   = {The Definitive Guide to Firebase},
  publisher = {Apress},
  title     = {The Definitive Guide to Firebase},
  year      = {2017}
}

@misc{node_cron,
  author       = {merencia},
  title        = {node-cron - npm},
  howpublished = {\url{https://www.npmjs.com/package/node-cron}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@book{rest_cookbook,
  author    = {Mark Masse},
  isbn      = {9781449310509},
  month     = {9},
  pages     = {1-114},
  title     = {REST API Design Rulebook},
  year      = {2011},
  publisher = {O'Reilly Media, Inc.}
}

@misc{selenium,
  author       = {Selenium},
  title        = {The Selenium Browser Automation Project | Selenium},
  howpublished = {\url{https://www.selenium.dev/documentation/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@book{Snell2002,
  abstract  = {1st ed. SOAP, Simple Object Access Protocol. Includes index. The web services architecture provides a new way to think about and implement application-to-application integration and interoperability that makes the development platform irrelevant. Two applications, regardless of operating system, programming language, or any other technical implementation detail, communicate using XML messages over open Internet protocols such as HTTP or SMTP. The Simple Open Access Protocol (SOAP) is a specification that details how to encode that information and has become the messaging protocol of choice for Web services. Programming Web Services with SOAP is a detail. Table of Contents; Preface; Audience for This Book; Structure of This Book; Conventions; Comments and Questions; Acknowledgments; James; Doug; Paul; Introducing Web Services; What Is a Web Service?; Web Service Fundamentals; What Web Services Look Like; Intersection of Business and Programming; Just-In-Time Integration; The Web Service Technology Stack; Beyond the Stack; Discovery; Description; Packaging; Transport; Network; Application; The Peer Services Model; Introducing SOAP; SOAP and XML; XML Messaging; RPC and EDI; The Need for a Standard Encoding; SOAP Messages; Envelopes; RPC Messages The mustUnderstand AttributeEncoding Styles; Versioning; SOAP Faults; Standard SOAP Fault Codes; MustUnderstand Faults; Custom Faults; The SOAP Message Exchange Model; Message Paths and Actors; The SOAP Routing Protocol; Using SOAP for RPC-Style Web Services; Invoking Methods; Returning Responses; Reporting Errors; SOAP's Data Encoding; Understanding the Terminology; XML Schemas and xsi:type; SOAP Data Types; Multiple References in XML-Encoded Data; Structs, Arrays, and Other Compound Types; Partially Transmitted Arrays and Sparse Arrays; Null Accessors; SOAP Transports; SOAP over HTTP Contentious IssuesWriting SOAP Web Services; Web Services Anatomy 101; SOAP Implementations and Toolkits; Handling SOAP Messages; Deploying Web Services; Creating Web Services in Perl with SOAP::Lite; Installing SOAP::Lite; The Hello Server; The Hello Client; A Visual Basic Client; Changing Transports; Creating Web Services in Java with Apache SOAP; Installing Apache SOAP; The Hello Server; Deployment Descriptor; The Hello Client; The TCPTunnelGui Tool; Creating Web Services In .NET; Installing .NET; Introducing .NET; Saying Hello; Deploying the Service; Invoking the Service Using SOAP Interoperability IssuesThe Publisher Web Service; Overview; Publisher Service Security; The Publisher Operations; The Publisher Server; The Preamble; Data Tables; Utility Functions; Register a New User; Modify User Information; User Login; Posting an Item; Removing Items; Browsing; Search; Deploying the Publisher Service; The Java Shell Client; The Authentication Class; The Client Class; Preamble; Authentication; User login; Wrappers to call the remote operations; The main routine; Deploying the Client; Describing a SOAP Service; Describing Web Services; A Quick Example Anatomy of a Service DescriptionDefining Data Types and Structures with XML Schemas; Using XML Schemas in WSDL; Describing the Web Service Interface; Describing the Web Service Implementation; Binding Web Service Interfaces; Describing the Location of a Web Service; Understanding Messaging Patterns; Single-Message Exchange; Multiple-Message Exchange; Complex Multiple-Message Exchanges; Intermediaries; Discovering SOAP Services; The UDDI Registry; Business Entity; Business Services; Binding Templates; TModels; Federated UDDI Registries; Private UDDI Registries; The UDDI Interfaces},
  author    = {James. Snell and Doug. Tidwell and Pavel. Kulchenko},
  isbn      = {0596000952},
  pages     = {244},
  publisher = {O'Reilly \& Associates},
  title     = {Programming Web services with SOAP},
  year      = {2002}
}

@misc{swagger,
  author       = {SmartBear},
  title        = {Swagger Specification | Documentation | Swagger},
  howpublished = {\url{https://swagger.io/docs/specification/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@misc{typedoc,
  author       = {TypeDoc},
  title        = {Overview | TypeDoc},
  howpublished = {\url{https://typedoc.org/guides/overview/}},
  year         = {2023},
  note         = {[Abril-2023]}
}

@report{typescript,
  author    = {Dan Vanderkam},
  isbn      = {9781492053743},
  title     = {Effective TypeScript 62 Specific Ways to Improve Your TypeScript},
  month     = {11},
  pages     = {1-264},
  year      = {2019},
  publisher = {O'Reilly Media, Inc.}
}

@book{web_api_node,
  abstract  = {Second edition. Annotation In this era of cloud computing, every data provisioning solution is built in a scalable and fail-safe way. Thus, when building RESTful services, the right choice for the underlying platform is vital. Node.js, with its asynchronous, event-driven architecture, is exactly the right choice to build RESTful APIs. This book will help you enrich your development skills to create scalable, server-side, RESTful applications based on the Node.js platform.},
  author    = {Valentin Bojinov},
  edition   = {Second Edition},
  isbn      = {9781786469137},
  month     = {5},
  pages     = {1-144},
  publisher = {Packt Publishing Ltd.},
  title     = {RESTful web API design with Node.js : design and implement efficient RESTful solutions with this practical hands-on guide},
  year      = {2016}
}

@book{web_scraping,
  author    = {Seppe vanden Broucke and Bart Baesens},
  doi       = {10.1007/978-1-4842-3582-9},
  journal   = {Practical Web Scraping for Data Science},
  publisher = {Apress},
  title     = {Practical Web Scraping for Data Science},
  year      = {2018}
}

@book{Juba2015,
   abstract = {Includes index. If you are a student, database developer, or administrator, interested in developing and maintaining a PostgreSQL database, then this book is for you. No knowledge of database programming or administration is necessary. PostgreSQL is one of the most powerful and easy-to-use database management systems. It supports the most advanced features included in the SQL standards. The book starts with an intruduction to relational databases with PostgreSQL. It then moves on to cover data definition language (DDL), with an emphasis on PostgreSQL and common DDL commands supported by ANSI SQL. You will then learn data manipulation language (DML) and advanced topics such as locking and performance tuning. This will give you a very robust background to tune and troubleshoot your application. The book then covers the implementation of data models in the database, such as creating tables, setting up integrity constraints, building indexes, defining views, and other schema objects. Next, it will give you an overview of the NoSQL capabilities of PostgreSQL, along with Hstore, XML, JSON and arrays. By the end of the book, you'll learn to use the JDBC driver and manipulate data objects in the Hibernate framework.},
   author = {Salahaldin Juba and Andrey Volkov and Achim Vannahme},
   isbn = {9781783989188},
   month = {11},
   pages = {-464},
   publisher = {Packt Publishing Ltd.},
   title = {Learning PostgreSQL : create, develop, and manage relational databases in real-world applications using PostgreSQL},
   year = {2015},
}

@misc{linking_firebase,
  author       = {Firebase},
  title        = {Operating System Integrations | Firebase Dynamic Links},
  howpublished = {\url{https://firebase.google.com/docs/dynamic-links/operating-system-integrations}},
  year         = {2023},
  note         = {[Abril-2023]}
}